/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.core.farmacia.mysql;

import com.core.farmacia.dao.DAOException;
import com.core.farmacia.dao.DAOLineaProducto;
import com.core.farmacia.model.LineaProducto;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author nuevo
 */
public class LineaProductoMysqlDaoImpl implements DAOLineaProducto {

    private String INSERT = "INSERT INTO linea_producto(nombre) VALUES(?)";
    private String DELETE = "DELETE FROM linea_producto WHERE id = ?";
    private String UPDATE = "UPDATE linea_producto SET nombre = ? WHERE id = ?";
    private String GETALL = "SELECT id, nombre FROM linea_producto";
    private String GETONE = "SELECT id, nombre FROM linea_producto WHERE id = ?";

    Connection conn;

    public LineaProductoMysqlDaoImpl(Connection conn) {
        this.conn = conn;
    }

    @Override
    public void ingresar(LineaProducto o) throws DAOException {
        PreparedStatement stact = null;
        ResultSet autoGenerated = null;
        try {
            stact = conn.prepareStatement(INSERT);
            stact.setString(1, o.getNombre());
            if (stact.executeUpdate() == 0) {
                new DAOException("Puede que no guarde la transaccion");
            }
            autoGenerated = stact.getGeneratedKeys();
            if (autoGenerated.next()) {
                o.setId(autoGenerated.getLong(1));
            } else {
                throw new DAOException("Error");
            }

        } catch (SQLException ex) {
            new DAOException("Se produjo algun error al relaizar la transaccion", ex);
        } finally {
            if (stact != null) {
                try {
                    stact.close();
                } catch (SQLException ex) {
                    new DAOException("Error al cerrar el PreparedStatemetn", ex);
                }
            }
        }
    }

    @Override
    public void actualizar(LineaProducto o) throws DAOException {
        PreparedStatement stact = null;

        try {
            stact = conn.prepareStatement(UPDATE);
            stact.setString(1, o.getNombre());
            stact.setLong(2, o.getId());
            if (stact.executeUpdate() == 0) {
                new DAOException("Error al subir datos");
            }
        } catch (SQLException ex) {
            new DAOException("Error al actualizar", ex);
        } finally {
            if (stact != null) {
                try {
                    stact.close();
                } catch (SQLException ex) {
                    new DAOException("Error al cerrar");
                }
            }
        }
    }

    @Override
    public void eliminar(LineaProducto o) throws DAOException {
        PreparedStatement stact = null;

        try {
            stact = conn.prepareStatement(DELETE);
            stact.setLong(1, o.getId());

            if (stact.executeUpdate() == 0) {
                new DAOException("Error al enviar query");
            }

        } catch (SQLException ex) {
            new DAOException("Error al eliminar");
        } finally {
            if (stact != null) {
                try {
                    stact.close();
                } catch (SQLException ex) {
                    new DAOException("Error al cerra stact");
                }
            }
        }
    }

    @Override
    public List<LineaProducto> getAll() throws DAOException {
        List<LineaProducto> lista = new ArrayList<>();
        PreparedStatement stact = null;
        ResultSet rs = null;

        try {
            stact = conn.prepareStatement(GETALL);
            rs = stact.executeQuery();

            while (rs.next()) {
                lista.add(new LineaProducto(rs.getLong("id"), rs.getString("nombre")));
            }

        } catch (SQLException ex) {
            new DAOException("Error al llamar Datos", ex);
        } finally {
            if (stact != null) {
                try {
                    stact.close();
                } catch (SQLException ex) {
                    new DAOException("Error al cerrar estact");
                }
            }
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    new DAOException("Error al cerrar rs", ex);
                }
            }
        }
        return lista;
    }

    @Override
    public LineaProducto getOne(Long o) throws DAOException {
        LineaProducto lineaProducto = null;
        PreparedStatement stact = null;
        ResultSet rs = null;

        try {
            stact = conn.prepareStatement(GETONE);
            stact.setLong(1, o);
            rs = stact.executeQuery();
            if (rs.next()) {
                lineaProducto = new LineaProducto(rs.getLong("id"), rs.getString("nombre"));
            }

        } catch (SQLException ex) {
            new DAOException("Error al traer el elemento", ex);
        } finally {
            if (stact != null) {
                try {
                    stact.close();
                } catch (SQLException ex) {
                    new DAOException("Error al cerrar el stact");
                }
            }
            if(rs != null){
                try {
                    rs.close();
                } catch (SQLException ex) {
                    new DAOException("Error al cerrar rs", ex);
                }
            }
        }

        return lineaProducto;
    }

}
