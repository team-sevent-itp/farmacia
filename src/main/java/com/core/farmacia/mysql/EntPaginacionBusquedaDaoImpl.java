package com.core.farmacia.mysql;

import com.core.farmacia.dao.DAOException;
import com.core.farmacia.dao.DAOPaginacionBs;
import com.core.farmacia.model.Ent_paginacion_bs;
import com.core.farmacia.model.Ent_producto;
import com.core.helper.UtiliesLocal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author nuevo
 */
public class EntPaginacionBusquedaDaoImpl implements DAOPaginacionBs {

    private String GETSEARCH = "{call ps_paginacion_bs(?, ?, ?)}";
    private String NPAGES = "SELECT FOUND_ROWS() AS cnt";
    private String INSERT = "INSERT INTO producto(nombre_producto, cantidad, iva, precio_uds_venta,margen_de_ganancia, id_presentacion, id_labotatorio, invima, id_linea_producto) VALUE(?, ?, ?, ?, ?, ?, ?, ?, ?)";
    private String UPDATE = "UPDATE producto SET nombre_producto = ?, cantidad=?, iva=?,precio_uds_venta=? WHERE id = ?";

    Connection conn;

    public EntPaginacionBusquedaDaoImpl(Connection conn) {
        this.conn = conn;
    }

    @Override
    public List<Ent_paginacion_bs> paginacion_producto(int limite_ini, int limite_superior, String value) throws DAOException {

        List<Ent_paginacion_bs> list = new ArrayList<>();
        CallableStatement stact = null;
        ResultSet rs = null;

        try {
            stact = conn.prepareCall(GETSEARCH);
            stact.setInt(1, limite_ini);
            stact.setInt(2, limite_superior);
            stact.setString(3, value);

            stact.execute();
            rs = stact.getResultSet();

            while (rs.next()) {
                Ent_paginacion_bs paginacionOb = new Ent_paginacion_bs(rs.getInt("id"),
                        rs.getString("nombre_producto"), rs.getInt("cantidad"), rs.getDouble("iva"),
                        rs.getDouble("precio_uds_venta"), rs.getDouble("margen_de_ganancia"),
                        rs.getString("NombrePresentacion"), rs.getString("Laboratorio"), rs.getString("invima"), rs.getString("Linea"));

                list.add(paginacionOb);
            }

        } catch (SQLException ex) {
            new DAOException("Error al llamar el procedimiento", ex);

        } finally {
            if (stact != null) {
                try {
                    stact.close();
                } catch (SQLException ex) {
                    new DAOException("Error al cerrar stact", ex);
                }
            }
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    new DAOException("Error al cerrar stact", ex);
                }
            }

        }

        return list;
    }

    @Override
    public int cantidadRegistros() {
        int nPages = 0;
        PreparedStatement stact = null;
        ResultSet rs = null;

        try {
            stact = conn.prepareStatement(NPAGES);
            rs = stact.executeQuery();
            if (rs.next()) {
                nPages = rs.getInt("cnt");
            }

        } catch (SQLException ex) {
            new DAOException("Error al traer el elemento", ex);
        } finally {
            if (stact != null) {
                try {
                    stact.close();
                } catch (SQLException ex) {
                    new DAOException("Error al cerrar el stact");
                }
            }
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    new DAOException("Error al cerrar rs", ex);
                }
            }
        }

        return nPages;
    }

    @Override
    public void ingresar(Ent_producto o) throws DAOException {
        PreparedStatement stact = null;
        ResultSet autoGenerated = null;
        try {
            stact = conn.prepareStatement(INSERT);
            stact.setString(1, o.getNombre());
            stact.setInt(2, o.getCantidad());
            stact.setDouble(3, o.getIva());
            stact.setDouble(4, o.getPrecio());
            stact.setDouble(5, o.getMargenDeGanancia());
            stact.setInt(6, o.getIdPresentacion());
            stact.setInt(7, o.getIdLaboratorio());
            stact.setString(8, o.getInvima());
            stact.setInt(9, o.getIdLineaProducto());
            
            
            if (stact.executeUpdate() == 0) {
                new DAOException("Puede que no guarde la transaccion");
            }
            autoGenerated = stact.getGeneratedKeys();
            if (autoGenerated.next()) {
                o.setId(autoGenerated.getInt(1));
            } else {
                throw new DAOException("Error");
            }

        } catch (SQLException ex) {
            new DAOException("Se produjo algun error al relaizar la transaccion", ex);
        } finally {
            if (stact != null) {
                try {
                    stact.close();
                } catch (SQLException ex) {
                    new DAOException("Error al cerrar el PreparedStatemetn", ex);
                }
            }
        }
    }

    @Override
    public void actualizar(Ent_producto o) throws DAOException {
        PreparedStatement stact = null;

        try {
            stact = conn.prepareStatement(UPDATE);
            stact.setString(1, o.getNombre());
            stact.setInt(2, o.getCantidad());
            stact.setDouble(3, o.getIva());
            stact.setDouble(4, o.getPrecio());
            stact.setInt(5, o.getId());
            if (stact.executeUpdate() == 0) {
                new DAOException("Error al subir datos");
            }
        } catch (SQLException ex) {
            new DAOException("Error al actualizar", ex);
        } finally {
            if (stact != null) {
                try {
                    stact.close();
                } catch (SQLException ex) {
                    new DAOException("Error al cerrar");
                }
            }
        }
    }

    @Override
    public void eliminar(Ent_producto o) throws DAOException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Ent_producto> getAll() throws DAOException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Ent_producto getOne(Integer o) throws DAOException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
